<!DOCTYPE html>
<html>
<head>
  <title>TravelGlobe</title>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <%= favicon_link_tag 'favicon.ico' %>
  <%= stylesheet_link_tag 'application', media: 'all' %>
  <%= javascript_include_tag 'application' %>
  <%= csrf_meta_tags %>
</head>
<body>
<%= render 'layouts/header' %>
<input id="search" class="controls" type="text" placeholder="Search">
<div id="map"></div>
<% if not current_user %>
  <!-- Modal -->
  <div class="modal fade" data-keyboard="false" data-backdrop="static" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel">
    <div class="vertical-alignment-helper">
      <div class="modal-dialog vertical-align-center" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="loginModalLabel">Welcome to TravelGlobe!</h4>
          </div>
          <div class="modal-body">
              <%= link_to image_tag("facebook.png"), "/auth/facebook" %>
          </div>
          <div class="modal-footer">
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">
    $(window).load(function(){
        $('#loginModal').modal('show');
    });
  </script>
<% end %>
<script>
  var map;
  var markers = [];

  $(document).ready(function() {
    // TODO: Move to js file
    
    $(window).resize(function() {
      $("#map").css("height", $(window).height() - $('#navbar').height());
      $(".modal-left .modal-content").css("height", $(window).height() - $('#navbar').height());
    }).resize();

    $('#trips').DataTable({
      "lengthChange": false,
      "info": false,
      "autoWidth": false,
      "order": [[0, "desc"]],
      "language": {
        "zeroRecords": "No matching trips found"
      },
      "columns": [
        {"width": "25%"},
        {"width": "25%"},
        {"width": "25%"},
        {"width": "25%"},
        {"visible": false}
      ]
    });

    $('#placesLived').DataTable({
      "lengthChange": false,
      "info": false,
      "autoWidth": false,
      "order": [[0, "desc"]],
      "language": {
        "zeroRecords": "No matching places found"
      },
      "columns": [
        { "width": "33%" },
        { "width": "33%" },
        { "width": "33%" },
      ]
    });
  });

  function initMap() {
    var travelGlobeMapType = new google.maps.StyledMapType([
      {
        "featureType": "all",
        "elementType": "all",
        "stylers": [
          {"hue": "#3b5998"},
          {"saturation": -22}
        ]
      }, {
        "featureType": "administrative",
        "elementType": "labels.icon",
        "stylers": [
          {"visibility": "on"},
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
          {"visibility": "simplified"},
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
          {"visibility": "on"},
          {"color": "#f7f7f7"},
          {"saturation": 10},
          {"lightness": 76}
        ]
      }, {
        "featureType": "landscape.natural",
        "elementType": "geometry",
        "stylers": [
          {"color": "#f7f7f7"}
        ]
      }, {
        "featureType": "road.highway",
        "elementType": "all",
        "stylers": [
          {"color": "#8b9dc3"},
          {"visibility": "simplified"}
        ]
      }, {
        "featureType": "road.highway",
        "elementType": "labels.icon",
        "stylers": [
          {"visibility": "off"}
        ]
      }, {
        "featureType": "road.local",
        "elementType": "geometry.fill",
        "stylers": [
          {"color": "#8b9dc3"}
        ]
      }, {
        "featureType": "transit.line",
        "elementType": "all",
        "stylers": [
          {"color": "#ffffff"},
          {"weight": 0.43}
        ]
      }, {
        "featureType": "transit",
        "elementType": "labels",
        "stylers": [
          {"visibility": "off"}
        ]
      }, {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [
          {"color": "#3b5998"},
          {"saturation": 10},
          {"lightness": 30},
          {"weight": 0.43}
        ]
      }
    ], {name: 'TravelGlobe Map'});

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 25, lng: 25},
      zoom: 3,
      minZoom: 3,
      maxZoom: 9,
      mapTypeControl: false,
      streetViewControl: false
    });

    map.mapTypes.set("travelglobe", travelGlobeMapType);
    map.setMapTypeId("travelglobe");

    <% if current_user %>
    var current_user_id = <%= current_user.id %>;
    // Color visited countries
    var visitedCountries = $.getJSON("/visited_countries").success(function(data) {
      var layerVisited = new google.maps.FusionTablesLayer({
        query: {
          select: 'Geometry',
          from: '1N2E7_-NS9_cQ7NKL61BwtvcrNLEeYB4Mk1G8LZzd',
          where: 'Code IN (\'' + data.countries.join('\',\'') + '\')' 
        },
        styles: [{
          polygonOptions: {
            fillColor: '#00FF00',
            fillOpacity: 0.3
          }
        }],
        suppressInfoWindows: true
      });
      layerVisited.setMap(map);
      google.maps.event.addListener(layerVisited, "click", function(event) {
        $('.modal.in').modal('hide');
        $('#myTripsModal').modal('show');
        $('#trips').DataTable().search(event.row.Name.value).draw();
      });
    });

    // Add markers to places lived
    addHouseMarkers(<%= raw @places_lived.pluck(:address, :latitude, :longitude).to_json %>);
    <% end %>

    // Prevent panning outside map boundaries
    map.addListener('center_changed', function() {
      var latNorth = map.getBounds().getNorthEast().lat();
      var latSouth = map.getBounds().getSouthWest().lat();
      var newLat;

      if (latNorth < 85 && latSouth > -85)  // OK (both top and bottom within boundaries)
        return;
      else {
        if (latNorth > 85 && latSouth < -85)  // OK (both top and bottom outside boundaries)
          return;
        else {
          if (latNorth > 85)
            newLat =  map.getCenter().lat() - (latNorth - 85);  // Too far north, centering
          if (latSouth < -85) 
            newLat =  map.getCenter().lat() - (latSouth + 85);  // Too far south, centering
        }
      }
      if (newLat) {
          var newCenter = new google.maps.LatLng(newLat, map.getCenter().lng());
          map.setCenter(newCenter);
      }
    });

    // Create the search box and link it to the UI element.
    var searchInput = document.getElementById('search');
    var searchBox = new google.maps.places.SearchBox(searchInput);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(searchInput);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      var place = places[0];

      removeMarkers();

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        title: place.name,
        position: place.geometry.location,
        label: "\u25CF",
        icon: {
          url: "<%= URI.join(root_url, image_path('map-marker.png')) %>",
          labelOrigin: new google.maps.Point(21, 10)
        }
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(9);
      }
    });

    var places = document.getElementById('google-places');
    var autocomplete = new google.maps.places.Autocomplete(places);
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
      $("#google-places").val('');
      $("#addPlace").click();
      listElement = $("#selectedPlaces li:last-child");
      listElement.find("input.place-name").val(place.name);
      listElement.find("input.place-latitude").val(place.geometry.location.lat());
      listElement.find("input.place-longitude").val(place.geometry.location.lng());
      listElement.find("input.place-order").val(listElement.index());
      listElement.find('span.place-name').text(place.name);
    });

    var placeLived = document.getElementById('place_lived_address');
    var placeLivedAutocomplete = new google.maps.places.Autocomplete(placeLived);
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    placeLivedAutocomplete.addListener('place_changed', function() {
      var place = placeLivedAutocomplete.getPlace();
      var address = [];
      var addressComponents = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name'
      };
      for (var i = 0; i < place.address_components.length; i++) {
        var addressType = place.address_components[i].types[0];
        if (addressComponents[addressType]) {
          var val = place.address_components[i][addressComponents[addressType]];
          address[(addressType==="route" && !$.isNumeric(place.formatted_address.charAt(0)))?"unshift":"push"](val);
        }
      }
      if (address.length > 2) {
        addressString = address.slice(0, -1).join(' ') + ', ' + address.slice(-1);
      } else {
        addressString = address.join(', ');
      }
      form = $("#new_place_lived");
      form.find("input#place_lived_address").val(addressString);
      form.find("input#place_lived_latitude").val(place.geometry.location.lat());
      form.find("input#place_lived_longitude").val(place.geometry.location.lng());
    });
  }

  function moveMap(locations) {
    var geocoder = new google.maps.Geocoder();
    var bounds = new google.maps.LatLngBounds();
    locations.forEach(function(location) {
      geocoder.geocode( { 'address': location}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          bounds.union(results[0].geometry.viewport);
          map.fitBounds(bounds);
        }
      });
    });
  }

  function moveMapLatLng(latitude, longitude) {
    var location = new google.maps.LatLng(latitude, longitude);
    map.setCenter(location);
    map.setZoom(9);
  }

  function addMarkers(places) {
    var infowindow = new google.maps.InfoWindow();
    places.forEach(function(place, i) {
      var marker = new google.maps.Marker({
        position: {lat: parseFloat(place[1]), lng: parseFloat(place[2])},
        label: (i+1).toString(),
        title: place[0],
        icon: {
          url: "<%= URI.join(root_url, image_path('map-marker.png')) %>",
          labelOrigin: new google.maps.Point(21, 12)
        },
        map: map
      });
      marker.addListener('click', function() {
        infowindow.setContent("<b>" + place[0] + "</b>");
        infowindow.open(map, marker);
      });
      markers.push(marker);
    });
  }

  function removeMarkers() {
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];
  }

  function addHouseMarkers(places) {
    var infowindow = new google.maps.InfoWindow();
    places.forEach(function(place, i) {
      var marker = new google.maps.Marker({
        position: {lat: parseFloat(place[1]), lng: parseFloat(place[2])},
        title: place[0],
        icon: {
          url: "<%= URI.join(root_url, image_path('house-marker.png')) %>",
          anchor: new google.maps.Point(16,20)
        },
        map: map
      });
      marker.addListener('click', function() {
        infowindow.setContent("<b>" + place[0] + "</b>");
        infowindow.open(map, marker);
      });
    });
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&libraries=places&language=en" async defer></script>

<%= yield %>

</body>
</html>
