<!DOCTYPE html>
<html>
<head>
  <title>TravelGlobe</title>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <%= stylesheet_link_tag 'application', media: 'all' %>
  <%= javascript_include_tag 'application' %>
  <%= csrf_meta_tags %>
</head>
<body>
<%= render 'layouts/header' %>
<input id="search" class="controls" type="text" placeholder="Search">
<div id="map"></div>
<% if not current_user %>
  <!-- Modal -->
  <div class="modal fade" data-keyboard="false" data-backdrop="static" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel">
    <div class="vertical-alignment-helper">
      <div class="modal-dialog vertical-align-center" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h4 class="modal-title" id="loginModalLabel">Welcome to TravelGlobe!</h4>
          </div>
          <div class="modal-body">
              <%= link_to image_tag("facebook.png"), "/auth/facebook" %>
          </div>
          <div class="modal-footer">
          </div>
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">
    $(window).load(function(){
        $('#loginModal').modal('show');
    });
  </script>
<% end %>
<script>
  var map;

  $(document).ready(function() {
    // TODO: Move to js file
    
    $(window).resize(function() {
      $("#map").css("height", $(window).height() - $('#navbar').height());
    }).resize();

    $('#trips').DataTable();
  });

  function initMap() {
    var travelGlobeMapType = new google.maps.StyledMapType([
      {
        "featureType": "all",
        "elementType": "all",
        "stylers": [
          {"hue": "#3b5998"},
          {"saturation": -22}
        ]
      }, {
        "featureType": "administrative",
        "elementType": "labels.icon",
        "stylers": [
          {"visibility": "on"},
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "administrative.country",
        "elementType": "geometry.stroke",
        "stylers": [
          {"visibility": "simplified"},
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "landscape",
        "elementType": "geometry",
        "stylers": [
          {"visibility": "on"},
          {"color": "#f7f7f7"},
          {"saturation": 10},
          {"lightness": 76}
        ]
      }, {
        "featureType": "landscape.natural",
        "elementType": "geometry",
        "stylers": [
          {"color": "#f7f7f7"}
        ]
      }, {
        "featureType": "road.highway",
        "elementType": "all",
        "stylers": [
          {"color": "#8b9dc3"},
          {"visibility": "simplified"}
        ]
      }, {
        "featureType": "road.highway",
        "elementType": "labels.icon",
        "stylers": [
          {"visibility": "off"}
        ]
      }, {
        "featureType": "road.local",
        "elementType": "geometry.fill",
        "stylers": [
          {"color": "#8b9dc3"}
        ]
      }, {
        "featureType": "transit.line",
        "elementType": "all",
        "stylers": [
          {"color": "#ffffff"},
          {"weight": 0.43}
        ]
      }, {
        "featureType": "transit",
        "elementType": "labels",
        "stylers": [
          {"visibility": "off"}
        ]
      }, {
        "featureType": "water",
        "elementType": "geometry",
        "stylers": [
          {"color": "#3b5998"}
        ]
      }, {
        "featureType": "water",
        "elementType": "labels",
        "stylers": [
          {"color": "#3b5998"},
          {"saturation": 10},
          {"lightness": 30},
          {"weight": 0.43}
        ]
      }
    ], {name: 'TravelGlobe Map'});

    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 25, lng: 25},
      zoom: 3,
      minZoom: 3,
      maxZoom: 9,
      mapTypeControl: false,
      streetViewControl: false
    });

    map.mapTypes.set("travelglobe", travelGlobeMapType);
    map.setMapTypeId("travelglobe");

    <% if current_user %>
    var current_user_id = <%= current_user.id %>;
    // Color visited countries
    var visitedCountries = $.getJSON("/users/"+current_user_id+"/visited_countries").success(function(data) {
      var layerVisited = new google.maps.FusionTablesLayer({
        query: {
          select: 'Geometry',
          from: '1N2E7_-NS9_cQ7NKL61BwtvcrNLEeYB4Mk1G8LZzd',
          where: 'Code IN (\'' + data.countries.join('\',\'') + '\')' 
        },
        suppressInfoWindows: true
      });
      layerVisited.setMap(map);
    });

    // Color home countries
    var homeCountries = $.getJSON("/users/"+current_user_id+"/home_countries").success(function(data) {
      var layerHome = new google.maps.FusionTablesLayer({
        query: {
          select: 'Geometry',
          from: '1N2E7_-NS9_cQ7NKL61BwtvcrNLEeYB4Mk1G8LZzd',
          where: 'Code IN (\'' + data.countries.join('\',\'') + '\')' 
        },
        styles: [{
          polygonOptions: {
            fillColor: '#00FF00',
            fillOpacity: 0.3
          }
        }],
        suppressInfoWindows: true
      });
      layerHome.setMap(map);
    });
    <% end %>

    // Prevent panning outside map boundaries
    map.addListener('center_changed', function() {
      var latNorth = map.getBounds().getNorthEast().lat();
      var latSouth = map.getBounds().getSouthWest().lat();
      var newLat;

      if (latNorth < 85 && latSouth > -85)  // OK (both top and bottom within boundaries)
        return;
      else {
        if (latNorth > 85 && latSouth < -85)  // OK (both top and bottom outside boundaries)
          return;
        else {
          if (latNorth > 85)
            newLat =  map.getCenter().lat() - (latNorth - 85);  // Too far north, centering
          if (latSouth < -85) 
            newLat =  map.getCenter().lat() - (latSouth + 85);  // Too far south, centering
        }
      }
      if (newLat) {
          var newCenter = new google.maps.LatLng(newLat, map.getCenter().lng());
          map.setCenter(newCenter);
      }
    });

    // Create the search box and link it to the UI element.
    var input = document.getElementById('search');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();

      if (places.length == 0) {
        return;
      }

      // Clear out the old markers.
      markers.forEach(function(marker) {
        marker.setMap(null);
      });
      markers = [];

      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
        var icon = {
          url: place.icon,
          size: new google.maps.Size(71, 71),
          origin: new google.maps.Point(0, 0),
          anchor: new google.maps.Point(17, 34),
          scaledSize: new google.maps.Size(25, 25)
        };

        // Create a marker for each place.
        markers.push(new google.maps.Marker({
          map: map,
          icon: icon,
          title: place.name,
          position: place.geometry.location
        }));

        if (place.geometry.viewport) {
          // Only geocodes have viewport.
          bounds.union(place.geometry.viewport);
        } else {
          bounds.extend(place.geometry.location);
        }
      });
      map.fitBounds(bounds);
    });
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&libraries=places&language=en" async defer></script>

<%= yield %>

</body>
</html>
